import { modifiers } from "./modifiers";
import { trigger } from "./triggers";
import { Entries } from "./types";
import {
  obj,
  country,
  either,
  scopeRef,
  enumRef,
  enumRefKey,
  variable_field,
  int,
  float,
} from "./utils";

export const targeted_modifier_rule = {
  targeted_modifier: obj(
    { scope: country() },
    {
      tag: either(scopeRef({}, "country"), enumRef({}, "country_tags")),
      ...modifiers,
    },
  ),
};

export const modifier_rule = {
  modifier: obj(
    {},
    {
      [enumRefKey("add_factor")]: variable_field({ cardinality: [1, 1] }),
      trigger: obj({ cardinality: [1, Infinity] }, { ...trigger }),
    },
  ),
};

// export const modifiers = {
//   "<ideology>_acceptance": int(),
//   "<ideology>_drift": float(),
//   "local_resources_<resource>": int(),
//   "country_resource_cost_<resource>": int(),
//   "state_resource_cost_<resource>": int(),
//   "country_resource_<resource>": int(),
//   "state_resource_<resource>": int(),
//   "temporary_state_resource_<resource>": int(),
//   [enumRefKey("sub_unit_modifiers")]: float(),
//   "production_speed_<building>_factor": float(),
//   "state_production_speed_<building>_factor": float(),
//   "repair_speed_<building>_factor": float(),
//   "<modifier_definition>": float(),
//   [valueSetKey("idea_slot") + "_cost_factor"]: float(),
//   hidden_modifier: obj({}, { ...modifier }),
//   custom_modifier_tooltip: localisation(),
// };

export const unit_stat: Entries = {
  acclimatization_cold_climate_gain_factor: float(),
  acclimatization_hot_climate_gain_factor: float(),
  air_attack: float(),
  ap_attack: float(),
  armor_value: float(),
  attack: float(),
  breakthrough: float(),
  build_cost_ic: float(),
  casualty_trickleback: float(),
  combat_width: float(),
  default_morale: float(),
  defence: float(),
  defense: float(),
  dont_lose_dig_in_on_attack: float(),
  entrenchment: float(),
  equipment_capture_factor: float(),
  experience_loss_factor: float(),
  fortification_collateral_chance: float(),
  fortification_damage: float(),
  fuel_consumption_factor: float(),
  fuel_consumption: float(),
  hard_attack: float(),
  hardness: float(),
  initiative: float(),
  initiative_factor: float(),
  lend_lease_cost: float(),
  manpower: float(),
  max_organisation: float(),
  max_strength: float(),
  maximum_speed: float(),
  movement: float(),
  naval_invasion_prep_speed: float(),
  paradrop_organization_factor: float(),
  paratrooper_aa_defense: float(),
  paratrooper_count_per_plane: float(),
  railway_gun_attack: float(),
  recon: float(),
  reliability_factor: float(),
  reliability: float(),
  river_crossing_factor: float(),
  soft_attack: float(),
  supply_consumption_factor: float(),
  supply_consumption: float(),
  suppression_factor: float(),
  suppression: float(),
  training_time: float(),
  weight: float(),
  // TODO: Support recursive objects
  // "<terrain>": obj({}, unit_stat),
  // [enumRefKey("region_weather")]: obj({}, { ...unit_stat }),
  // night: obj({}, { ...unit_stat }),
  // amphibious: obj({}, { ...unit_stat }),
  // fort: obj({}, { ...unit_stat }),
  // river: obj({}, { ...unit_stat }),
};

export const naval_stat: Entries = {
  anti_air_attack: float(),
  carrier_size: float(),
  convoy_raiding_coordination: float(),
  evasion: float(),
  fire_range: float(),
  hg_armor_piercing: float(),
  hg_attack: float(),
  lg_armor_piercing: float(),
  lg_attack: float(),
  mines_planting: float(),
  mines_sweeping: float(),
  naval_accidents_chance: float(),
  naval_damage_factor: float(),
  naval_heavy_gun_hit_chance_factor: float(),
  naval_invasion_penalty: float(),
  naval_light_gun_hit_chance_factor: float(),
  naval_mine_hit_chance: float(),
  naval_mines_damage_factor: float(),
  naval_morale_factor: float(),
  naval_morale: float(),
  naval_range: float(),
  naval_retreat_chance: float(),
  naval_retreat_speed: float(),
  naval_torpedo_enemy_critical_chance_factor: float(),
  naval_torpedo_damage_reduction_factor: float(),
  naval_speed_factor: float(),
  naval_speed: float(),
  naval_supremacy_factor: float(),
  naval_torpedo_hit_chance_factor: float(),
  naval_weather_penalty_factor: float(),
  navy_casualty_on_sink: float(),
  navy_fuel_consumption_factor: float(),
  navy_org_factor: float(),
  navy_visibility: float(),
  port_capacity_usage: float(),
  positioning: float(),
  search_and_destroy_coordination: float(),
  shore_bombardment: float(),
  strike_force_movement_org_loss: float(),
  sub_attack: float(),
  sub_detection: float(),
  sub_visibility: float(),
  surface_detection: float(),
  surface_visibility: float(),
  torpedo_attack: float(),
};

export const air_stat: Entries = {
  air_agility: float(),
  air_attack_factor: float(),
  air_attack: float(),
  air_bombing: float(),
  air_defence: float(),
  air_defense: float(),
  air_ground_attack: float(),
  air_range: float(),
  air_superiority: float(),
  air_mission_efficiency: float(),
  air_cas_efficiency: float(),
  air_nav_efficiency: float(),
  carrier_size: float(),
  default_carrier_composition_weight: float(),
  ground_attack_factor: float(),
  naval_strike_attack: float(),
  naval_strike_attack_factor: float(),
  naval_strike_targetting: float(),
  naval_strike_targetting_factor: float(),
  thrust: float(),
  night_penalty: float(),
};

export const unit_leader_modifier: Entries = {
  air_superiority_bonus_in_combat: float(),
  cannot_use_abilities: int({}, 0, 1),
  cas_damage_reduction: float(),
  equipment_capture: float(),
  extra_marine_supply_grace: float(),
  extra_paratrooper_supply_grace: float(),
  max_army_group_size: int(),
  max_commander_army_size: int(),
  org_loss_when_moving: float(),
  promote_cost_factor: float(),
  reassignment_duration_factor: float(),
  recon_factor_while_entrenched: float(),
  shore_bombardment_bonus: float(),
  skill_bonus_factor: float(),
  wounded_chance_factor: float(),
  "<terrain>": obj({}, { ...unit_stat }),
  night: obj({}, { ...unit_stat }),
  amphibious: obj({}, { ...unit_stat }),
  fort: obj({}, { ...unit_stat }),
  river: obj({}, { ...unit_stat }),
};

export const modifier_additional: Entries = {
  [enumRefKey("tech_category") + "_cost_factor"]: float(),
  ["trait_<unit_leader_trait.gainable_trait>_xp_gain_factor"]: float(),
  ["<unit_leader_trait.gainable_trait>_xp_gain_factor"]: float(),
  ["unit_<unit>_design_cost_factor"]: float(),
  ["<equipment.archetype_equip>_design_cost_factor"]: float(),
  ["production_cost_max_<equipment.archetype_equip>"]: float(),
  ["<duplicate_archetypes>_design_cost_factor"]: float(),
  ["production_cost_max_<duplicate_archetypes>"]: float(),
  ["experience_gain_<unit>_combat_factor"]: float(),
  ["experience_gain_<unit>_training_factor"]: float(),
  ["<combat_tactic>_preferred_weight_factor"]: float(),
};
